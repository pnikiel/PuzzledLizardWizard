#include <libuio.h>
#include <stdio.h>
#include <stdlib.h>

#include <{{json['registerMap']['name']}}.h>

// for register map: {{json['registerMap']['name']}}

struct uio_info_t*  {{json['registerMap']['name']}}_open (unsigned int devnum)
{
  struct uio_info_t* uio_info = uio_find_by_uio_num(devnum);
  if (!uio_info)
  {
    printf ("ERROR on uio_find_by_uio_num failed: %x\n ", uio_info);
    return 0;
  }
  printf ("Found device on device ids: %d:%d\n", uio_get_major(uio_info), uio_get_minor(uio_info));
  if (uio_open(uio_info))
  {
    printf ("ERROR on uio_open!");
    return 0;
  }
  return uio_info;
}

{% for register in json['registerMap']['registers'] %}

  // at register: {{register['name']}}

  {% for field in register['fields'] %}
    {% if register['access'] == "READ_ONLY" or register['access'] == "READ_WRITE" %}
      uint32_t {{json['registerMap']['name']}}_read_{{register['name']}}_{{field['name']}} (struct uio_info_t* uio_info)
      {
        uint32_t value;
        if (uio_read32 (
          uio_info, 
          0 /*map*/, 
          {{register['addressOffset']}} /* address offset */,
          &value))
          {
            printf("problem reading");
            abort();
          };
        return value;
      }
    {% endif %}
    {% if register['access'] == "WRITE_ONLY" or register['access'] == "READ_WRITE" %}
      void {{json['registerMap']['name']}}_write_{{register['name']}}_{{field['name']}} (struct uio_info_t* uio_info, uint32_t value)
      {
        uio_write32 (
          uio_info, 
          0 /*map*/, 
          {{register['addressOffset']}} /* address offset */,
          value);
      }
    {% endif %}
  {% endfor %}

{% endfor %}
